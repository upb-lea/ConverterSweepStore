# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'initializeWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import threading
from PyQt5.QtWidgets import QApplication,QWidget,QMainWindow,QWidget,QMessageBox
from PyQt5 import QtCore,uic
from PyQt5.QtGui import QIcon
from pandasModel import pandasModel
from thermalParamClass import thermalParamClass
import re
import os
import numpy as np
import time as t
import csv
import pandas as pd
from retrying import retry
from GISMSParameters_phi import GISMSParameters_phi
import glob
import psweep as ps
import subprocess
from startConnection import startConnection 
from dataBaseClass import dataBaseClass

class MainWindow(QMainWindow):
    filepath = r'calc\\results.pk'
    Tfilepath = r'calc\Thermal\params.csv'
    def __init__(self): 
        super().__init__()
        uic.loadUi('initializeWindow.ui',self)
        _translate = QtCore.QCoreApplication.translate
        self.setWindowIcon(QIcon('clienticon.png'))
        self.setWindowTitle(_translate("MainWindow", "Inverter Sweep Store"))
        self.dateTimeLabel.setText(_translate("MainWindow", "12:02:59 Jan 12 2021"))
        self.simulateBtn.clicked.connect(self.simulate)
        self.showGSIMS.stateChanged.connect(self.showGSIMSData)
        self.progressBar.hide()
        self.progressBar.reset()
        self.thermalBtn.clicked.connect(self.openDataBase) 
        self.toolButtonIGBT.clicked.connect(self.loadThermalBox)
        self.toolButtonIGBT.setAutoRaise(True)
        self.toolButtonRev.clicked.connect(self.loadThermalBox)
        self.toolButtonRev.setAutoRaise(True)
        self.toolButtonFW.clicked.connect(self.loadThermalBox)
        self.toolButtonFW.setAutoRaise(True)
        self.loadPrevParams()

    def checkThermalParams(self,df):
        def checkIfExists(sheetList):
            areAllinDB = True
            for sheet in sheetList:
                areAllinDB = areAllinDB and sheet in df.index
            return areAllinDB
        return checkIfExists

    def simulate(self):       
        try :
            dcVltgList = self.dcVltgIn.toPlainText()
            dcVltgList = re.split(',|\s+|;|\n',dcVltgList)
            dcVltgListNew = [int(i) for i in dcVltgList]
            loadWInList = self.loadWIn.toPlainText()
            loadWInList = re.split(',|\s+|;|\n',loadWInList)
            loadWInListNew = [int(i) for i in loadWInList]
            pfDegreeInList = self.pfDegreeIn.toPlainText()
            pfDegreeInList = re.split(',|\s+|;|\n',pfDegreeInList)
            pfDegreeInListNew = [float(i) for i in pfDegreeInList]
            switchFreqInList = self.switchFreqIn.toPlainText()
            switchFreqInList = re.split(',|\s+|;|\n',switchFreqInList)
            switchFreqInListNew = [int(i) for i in switchFreqInList]
            tempInList = self.tempIn.toPlainText()
            tempInList = re.split(',|\s+|;|\n',tempInList)
            tempInListNew = [int(i) for i in tempInList]
            fOutList = self.fOutIn.toPlainText()
            fOutList = re.split(',|\s+|;|\n',fOutList)
            fOutListNew = [int(i) for i in fOutList]
            igbtDataInList = self.igbtDataIn.toPlainText()
            igbtDataInList = re.split(',|\s+|;|\n',igbtDataInList)
            revDataInList = self.revDataIn.toPlainText()
            revDataInList = re.split(',|\s+|;|\n',revDataInList)
            fwDataInList = self.fwDataIn.toPlainText()
            fwDataInList = re.split(',|\s+|;|\n',fwDataInList)
            paramsContainer = {'V_DC':dcVltgListNew,'Load_S':loadWInListNew,'Load_phi':pfDegreeInListNew,'f_s':switchFreqInListNew,'f_out':fOutListNew,
                               'T_HS':tempInListNew,'Transistor':igbtDataInList,'Transistor_revD':revDataInList,'Transistor_fwD':fwDataInList }
            for x in paramsContainer:
                result = True
                if x=='Transistor' or x == 'Transistor_revD' or x== 'Transistor_fwD':
                    result = not(any([re.search("^\s*$", elem) for elem in paramsContainer[x]]))
                if paramsContainer[x] and result :
                    print(x + ':Accepted')
                else:
                    raise Exception('Please check the DataSheet inputs provided')
            self.statusWriteLabel.setStyleSheet("QLabel { background-color : green; color : black; }")
            self.statusWriteLabel.setText('Inputs are good')
            areAllinDb = False
            equalLenSheets = len(igbtDataInList)==len(revDataInList) and len(revDataInList)==len(fwDataInList)
            if os.path.exists(self.Tfilepath) and equalLenSheets:
                df = pd.read_csv(self.Tfilepath,index_col =['Datasheet'])
                tocheck = self.checkThermalParams(df)
                areAllinDb = tocheck(igbtDataInList) and tocheck(revDataInList) and tocheck(fwDataInList)
                if not areAllinDb:
                    raise Exception('Check the Thermal Params')
            else :
                msg = ('Input Sheets should be of same length', 'Thermal params file not found')[equalLenSheets]
                raise Exception(msg)
            self.statusWriteLabel.adjustSize()
            saveData = self.saveLossData.isChecked();
            createobj = startConnection(paramsContainer,saveData)
            createobj.gismsUpdate.connect(self.updateGSIMS)
            createobj.progressUpdate.connect(self.updateProgressBar)
            #createobj.eventemit()
            self.progressBar.show()
            self.progressBar.setValue(1)
            self.progressBar.setMaximum(100)
            test_thread = threading.Thread(target = createobj.initiateConnection)
            test_thread.start()
        
        except Exception as e:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText(str(e.args[0]))
            msgBox.exec()
        except :
            errorOutput = 'unexpected error : '+ str( sys.exc_info()[0])
            print(errorOutput)
            self.statusWriteLabel.setStyleSheet("QLabel { background-color : red; color : blue; }")
            self.statusWriteLabel.setText('Please check the inputs provided\n'+ str( sys.exc_info()[0]))
            self.statusWriteLabel.adjustSize()
   
    def showGSIMSData(self):
        if(self.showGSIMS.isChecked()):
            self.gridLayoutWidget.hide()
            self.GSIMSLabel.hide()
        else:
            self.gridLayoutWidget.show()
            self.GSIMSLabel.show()
    @QtCore.pyqtSlot(dict)
    def updateGSIMS(self,out):
        print('we are inside')
        self.loadVltgOut.setText(str(round(out['U_RMS_U_Load'],2)))
        self.cCurrentOut.setText(str(round(out['I_RMS_Filter_C'],2)))
        self.invCosPhiOut.setText(str(round(out['cos_phi_inv'],3)))
        self.modulationOut.setText(str(round(out['m'],3)))
        self.peakRlcCurrentOut.setText(str(round(out['I_Peak_inv'],2)))
        self.loadZOut.setText(str(complex(round(out['Z_Load'].real,2),round(out['Z_Load'].imag,2))))
        self.lVltgOut.setText(str(round(out['U_RMS_U_Filter_L'],2)))
        self.invVtlgOut.setText(str(out['U_Load_LL']))
    @QtCore.pyqtSlot(int,str)
    def updateProgressBar(self,value,text) :
        if value==-1:
            self.progressBar.setFormat(text)
        else :
            self.progressBar.setValue(value)
    
    def openDataBase(self):
        self.dataBaseWindow = dataBaseClass()
        self.dataBaseWindow.loadData()
        self.dataBaseWindow.show()
            #self.progressBar.hide()
            
    def loadPrevParams(self):
        df = pd.read_pickle(self.filepath)
        self.model = pandasModel(df)
        lastSweepParams = self.model.returnLastSweep()
        self.dcVltgIn.setPlainText(str(lastSweepParams.V_DC))
        self.loadWIn.setPlainText(str(lastSweepParams.Load_S))
        self.pfDegreeIn.setPlainText(str(lastSweepParams.Load_phi))
        self.switchFreqIn.setPlainText(str(lastSweepParams.f_s))
        self.tempIn.setPlainText(str(lastSweepParams.T_HS))
        self.fOutIn.setPlainText(str(lastSweepParams.f_out))
        self.igbtDataIn.setPlainText(str(lastSweepParams.Transistor))
        self.revDataIn.setPlainText(str(lastSweepParams.Transistor_revD))
        self.fwDataIn.setPlainText(str(lastSweepParams.Transistor_fwD))
        #print(lastSweepParams)
    def swit(self,x):
            return {
             'toolButtonIGBT': self.igbtDataIn.toPlainText(),
             'toolButtonFW': self.fwDataIn.toPlainText(),
             'toolButtonRev': self.revDataIn.toPlainText()
            }.get(x, [])

    def loadThermalBox(self):
        sender = self.sender()
        obj = sender.objectName()
        sheetList = self.swit(obj)
        sheetList = re.split(',|\s+|;|\n',sheetList)
        self.thermalWindow = thermalParamClass(sheetList)
        self.thermalWindow.show()


            





                
        

if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    try:
        sys.exit(app.exec_())
    except SystemExit:
        print('Closing Window....')
